/**
 * Copyright (c) 2014-2015 Eclectic Logic LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.eclecticlogic.pedal.dm;

// Generated May 28, 2014 8:44:27 AM by Hibernate Tools 4.3.1

import jakarta.persistence.Column;
import jakarta.persistence.Convert;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;

/**
 * ExoticTypes generated by hbm2java
 */
@Entity
@Table(name = "exotic_types")
public class ExoticTypes implements java.io.Serializable {

    private String login;
    private Status status;
    private String custom;
    private Color color;
    private int total;
    private Student student;

    @Id
    @Column(name = "login", unique = true, nullable = false)
    public String getLogin() {
        return this.login;
    }

    public void setLogin(String login) {
        this.login = login;
    }

    @Column(name = "status", nullable = false, length = 2)
    @Convert(converter = StatusConverter.class)
    public Status getStatus() {
        return status;
    }

    public void setStatus(Status status) {
        this.status = status;
    }

    @Column(name = "custom", nullable = false)
    public String getCustom() {
        return custom;
    }

    public void setCustom(String custom) {
        this.custom = custom;
    }

    @Column(name = "color")
    @Convert(converter = ColorConverter.class)
    public Color getColor() {
        return color;
    }

    public void setColor(Color color) {
        this.color = color;
    }

    /**
     * To test exclusion of fields with parameters since they are not java-bean properties and return type is embeddable.
     * @param input planet id
     * @return PlanetId
     */
    public PlanetId getSomeValue(int input) {
        return new PlanetId("test", input);
    }

    @Column(name = "total", nullable = false)
    public int getTotal() {
        return total;
    }

    public void setTotal(int total) {
        this.total = total;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "student_id", nullable = false)
    public Student getStudent() {
        return student;
    }

    public void setStudent(Student student) {
        this.student = student;
    }

    @Transient // Transient should prevent embeddable from being added to copy list.
    public VehicleIdentifier getVehicleIdentifier() {
        return null;
    }

    public void setVehicleIdentifier() {
        // noop
    }
}
